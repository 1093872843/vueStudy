dependencies 和 devDependencies 的区别
  dependencies 是使用 npm install module-name -save 安装的依赖包
  devDependencies 是使用 npm install module-name -save-dev 安装的依赖包

package-lock.json
  1.描述
    对package.json中依赖包版本锁定，package.json只能记录依赖大的版本号也就是版本号的第一位，并不能锁定后面的小版本.
    我们上传到git然后用另一条电脑重新install的时候，每次npm install都是拉取的该大版本下的最新的版本，不一定是我们原
    来的代码用的版本,这会导致你将项目源代码得到的依赖版本不一致，这是个很糟糕的结果。所以出现了package-lock.json，npm
    5.x之后已经开始支持自动生成package-lock.json，为的是让开发者知道只要你保存了源文件，到一个新的机器上、或者新的下载源，
    只要按照这个package-lock.json所标示的具体版本下载依赖库包，就能确保所有库包与你上次安装的完全一样。

  2.没有生成package-lock.js文件，
    如果没有出现package-lock.js文件，那么请确保npm版本大于5，如果依旧没有，请确保你使用的是npm而不是cnpm,
    cnpm不会生成package-lock.json并且不会使用package-lock.json，也不会同步更新package-lock.json。

  3.如何更新package-lock.json内的版本
    以前：在以前可能就是直接改package.json里面的版本，然后再npm install了。
    现在：但是5版本后就不支持这样做了，
      5.0.x后:不管package.json怎么变，npm i 时都会根据lock文件下载
      5.1.0后:npm install 会无视lock文件 去下载最新的npm 
      5.4.2后:如果改了package.json，且package.json和lock文件不同，那么执行`npm i`时npm会根据package中的版本号以及语义
              含义去下载最新的包，并更新至lock。如果两者是同一状态，那么执行`npm i `都会根据lock下载，不会理会package实
              际包的版本是否有更新。
              



