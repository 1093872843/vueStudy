webPack  
(学习网站：https://www.cnblogs.com/-walker/p/6056529.html)
  可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能
直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用.
  浏览器每次刷新都会重新请求服务器的js文件，
  把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，
使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。

优点：模块化
  在webpack看来一切都是模块！这就是它不可不说的优点，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，
  它们都可以被当做模块被处理。
  1、CSS
     webpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同.
     css-loader使你能够使用类似@import 和 url(...)的方法实现 require()的功能,
     style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。
    需要分别安装：npm install --save-dev style-loader css-loader
  2、CSS modules
      在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。
    模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。
    不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。
    最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。
    Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，
    然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题