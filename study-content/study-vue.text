1.整个vue项目其实就是一个最大的vue实例，所有的组件，变量，都是挂载在这个vue实例下的内容，
我们一般做的Vue.xxx操作，比如Vue.component，Vue.config其实就是对这个最大的vue实例操作，也就是操作全局变量。

2.vue操作的是虚拟Dom节点，这是一个树形结构，每一个标签都是一个节点，甚至每一个标签的文本内容也是一个子节点。


dependencies 和 devDependencies 的区别
  dependencies 是使用 npm install module-name -save 安装的依赖包
  devDependencies 是使用 npm install module-name -save-dev 安装的依赖包

package-lock.json
  1.描述
    对package.json中依赖包版本锁定，package.json只能记录依赖大的版本号也就是版本号的第一位，并不能锁定后面的小版本.
    我们上传到git然后用另一条电脑重新install的时候，每次npm install都是拉取的该大版本下的最新的版本，不一定是我们原
    来的代码用的版本,这会导致你将项目源代码得到的依赖版本不一致，这是个很糟糕的结果。所以出现了package-lock.json，npm
    5.x之后已经开始支持自动生成package-lock.json，为的是让开发者知道只要你保存了源文件，到一个新的机器上、或者新的下载源，
    只要按照这个package-lock.json所标示的具体版本下载依赖库包，就能确保所有库包与你上次安装的完全一样。

  2.没有生成package-lock.js文件，
    如果没有出现package-lock.js文件，那么请确保npm版本大于5，如果依旧没有，请确保你使用的是npm而不是cnpm,
    cnpm不会生成package-lock.json并且不会使用package-lock.json，也不会同步更新package-lock.json。

  3.如何更新package-lock.json内的版本
    以前：在以前可能就是直接改package.json里面的版本，然后再npm install了。
    现在：但是5版本后就不支持这样做了，
      5.0.x后:不管package.json怎么变，npm i 时都会根据lock文件下载
      5.1.0后:npm install 会无视lock文件 去下载最新的npm 
      5.4.2后:如果改了package.json，且package.json和lock文件不同，那么执行`npm i`时npm会根据package中的版本号以及语义
              含义去下载最新的包，并更新至lock。如果两者是同一状态，那么执行`npm i `都会根据lock下载，不会理会package实
              际包的版本是否有更新。

vue创建的几种方式
  一个.vue文件可以看作是一个vue实例，编译过程中，vue-loader会把.vue文件夹加载为三个部分并交个特定的处理器然后产生一个页面。
  1.js语法
    1.1使用template模板
      <script>
          Vue.component('magic-eight-ball', {
            data: function () {
              return {
                possibleAdvice: ['Yes', 'No', 'Maybe']
              }
            },
            methods: {
              giveAdvice: function () {
                var randomAdviceIndex = Math.floor(Math.random() * this.possibleAdvice.length)
                this.$emit('give-advice', this.possibleAdvice[randomAdviceIndex])
              }
            },
            template: `
              <button v-on:click="giveAdvice">
                Click me for advice
              </button>
            `
          })
      </script

      1.2 使用html和js
        <div id="emit-example-argument">
          <magic-eight-ball v-on:give-advice="showAdvice"></magic-eight-ball>
        </div>

        <script>
          new Vue({
            el: '#emit-example-argument', //数据挂载在页面的位置，关联html标签id
            methods: {
              showAdvice: function (advice) {
                alert(advice)
              }
            }
          })
        </script>
      
      1.3 函数式创建（渲染函数）
        Vue.component('magic-eight-ball', {
          // Props 是可选的
          props: {},
          // 为了弥补缺少的实例
          // 提供第二个参数作为上下文
          render: function (createElement, context) {}
        })

      1.4使用Babel 插件，用于在 Vue 中使用 JSX 语法，让我们使用渲染函数更接近于模板的语法上。
        import AnchoredHeading from './AnchoredHeading.vue'
        new Vue({
          el: '#demo',
          render: function (h) {
            return (
              <AnchoredHeading level={1}>
                <span>Hello</span> world!
              </AnchoredHeading>
            )
          }
        })
        
  2.vue文件创建
    .vue文件是自定义的一种文件类型，分为三个部分。<template>,<script>,<style>








